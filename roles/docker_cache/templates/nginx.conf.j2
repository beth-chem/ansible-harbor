
user  nginx;
worker_processes  1;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    keepalive_timeout  65;
    client_max_body_size        0;  # Allow unlimited upload size

    # Large file optimisations
    client_body_buffer_size     50M;  # Anything < 50MB can be served from memory
    gzip  off;  # This will only run internally so bandwidth is "unlimited"
    sendfile        on;
    tcp_nopush on;  # Fill our TCP packet to MSS before sending

    {% if host_ssl_termination %}
    include /etc/nginx/ssl.conf;
    server {
        # Redirect all to HTTPS if SSL Termination is happening on host
        listen 80 default_server;
        listen [::]:80;

        server_name _;

        return 301 https://$host$request_uri;
    }
    {% endif %}

    server {
        # Use 443 or 80 depending on if SSL Termination happens on host
        {% if host_ssl_termination %}
        listen 443 ssl;
        listen [::]:443 ssl;
        {% else %}
        listen 80;
        listen [::]:80;
        {% endif %}

        # Only allow access on STFC and private addresses
        allow 130.246.0.0/16;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        deny all;

        server_name {{ mirror_hostname }};
        access_log {{ mirror_hostname }}.log;

        # Redirect to caching layer
        location / {
            proxy_pass http://docker-cache:5000;
            proxy_set_header  host  $http_host;
            proxy_set_header  X-Real-IP         $remote_addr;
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Forwarded-Proto $scheme;
        }

    }

    server {
        # Use 443 or 80 depending on if SSL Termination happens on host
        {% if host_ssl_termination %}
        listen 443 ssl;
        listen [::]:443 ssl;
        {% else %}
        listen 80;
        listen [::]:80;
        {% endif %}

        server_name {{ harbor_hostname }};
        access_log {{ harbor_hostname }}.log;

        # Redirect to harbor on host machine
        location / {
            proxy_pass http://172.17.0.1:8080;
            proxy_set_header  X-Real-IP         $remote_addr;
            proxy_set_header  Host              $http_host;
            proxy_set_header  X-Real-IP         $remote_addr;
            proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header  X-Forwarded-Proto $scheme;
        }
    }
}
